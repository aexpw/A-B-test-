{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "46536992",
   "metadata": {},
   "source": [
    "<h2> Описание   \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc23f680",
   "metadata": {},
   "source": [
    "Набор данных из мобильной игры Cookie Cats от Tactile Games.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01f46074",
   "metadata": {},
   "source": [
    "\n",
    "Цель A/B-теста изучить, что происходит, когда в приложении меняется gate  30 на 40. <br/>\n",
    "Для всех пользователей случайным образом генерируется gate 30 или 40."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39132ea7",
   "metadata": {},
   "source": [
    "Gate 30 и 40 коррелирует с количество времени. <br/>\n",
    "По мере прохождения уровней игры, игроки сталкиваются с перерывами в игре. <br/>\n",
    "Эти перерывы заставляют их ждать определенное количество времени, или совершать покупки в приложении, <br/> чтобы пройти дальше. <br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fffdebe9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "61e7b3a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/god/desktop/cookie_cats.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3fe3a6b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>version</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>38</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>165</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>179</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90184</th>\n",
       "      <td>9999441</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>97</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90185</th>\n",
       "      <td>9999479</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>30</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90186</th>\n",
       "      <td>9999710</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>28</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90187</th>\n",
       "      <td>9999768</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>51</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90188</th>\n",
       "      <td>9999861</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>16</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90189 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        userid  version  sum_gamerounds  retention_1  retention_7\n",
       "0          116  gate_30               3        False        False\n",
       "1          337  gate_30              38         True        False\n",
       "2          377  gate_40             165         True        False\n",
       "3          483  gate_40               1        False        False\n",
       "4          488  gate_40             179         True         True\n",
       "...        ...      ...             ...          ...          ...\n",
       "90184  9999441  gate_40              97         True        False\n",
       "90185  9999479  gate_40              30        False        False\n",
       "90186  9999710  gate_30              28         True        False\n",
       "90187  9999768  gate_40              51         True        False\n",
       "90188  9999861  gate_40              16        False        False\n",
       "\n",
       "[90189 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c66543bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 90189 entries, 0 to 90188\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype \n",
      "---  ------          --------------  ----- \n",
      " 0   userid          90189 non-null  int64 \n",
      " 1   version         90189 non-null  object\n",
      " 2   sum_gamerounds  90189 non-null  int64 \n",
      " 3   retention_1     90189 non-null  bool  \n",
      " 4   retention_7     90189 non-null  bool  \n",
      "dtypes: bool(2), int64(2), object(1)\n",
      "memory usage: 2.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2c7e316a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "userid            False\n",
       "version           False\n",
       "sum_gamerounds    False\n",
       "retention_1       False\n",
       "retention_7       False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "740f0f7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>57702</th>\n",
       "      <td>6390605</td>\n",
       "      <td>49854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7912</th>\n",
       "      <td>871500</td>\n",
       "      <td>2961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29417</th>\n",
       "      <td>3271615</td>\n",
       "      <td>2640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43671</th>\n",
       "      <td>4832608</td>\n",
       "      <td>2438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48188</th>\n",
       "      <td>5346171</td>\n",
       "      <td>2294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59687</th>\n",
       "      <td>6610805</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23707</th>\n",
       "      <td>2639282</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59670</th>\n",
       "      <td>6608718</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59645</th>\n",
       "      <td>6604544</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45094</th>\n",
       "      <td>4995815</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90189 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        userid  sum_gamerounds\n",
       "57702  6390605           49854\n",
       "7912    871500            2961\n",
       "29417  3271615            2640\n",
       "43671  4832608            2438\n",
       "48188  5346171            2294\n",
       "...        ...             ...\n",
       "59687  6610805               0\n",
       "23707  2639282               0\n",
       "59670  6608718               0\n",
       "59645  6604544               0\n",
       "45094  4995815               0\n",
       "\n",
       "[90189 rows x 2 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['userid', 'sum_gamerounds']].sort_values('sum_gamerounds', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a18f8aec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.scatterplot(x='userid',y='sum_gamerounds',data=df[['userid', 'sum_gamerounds']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24cb8b50",
   "metadata": {},
   "source": [
    "Информация об игроке 6390605 похожа на фейк, избавлюсь от нее \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "41ea3657",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(90188, 5)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.copy().drop(df[df.userid==6390605].index)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2b5ebdf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>group</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>A</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>A</td>\n",
       "      <td>38</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>B</td>\n",
       "      <td>165</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>B</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>B</td>\n",
       "      <td>179</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userid group  sum_gamerounds  retention_1  retention_7\n",
       "0     116     A               3        False        False\n",
       "1     337     A              38         True        False\n",
       "2     377     B             165         True        False\n",
       "3     483     B               1        False        False\n",
       "4     488     B             179         True         True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Поменяю графу version на group для удобства\n",
    "df.rename(columns={'version':'group'}, inplace=True)\n",
    "df['group'] = df['group'].replace({'gate_30':'A', 'gate_40':'B'})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b34db897",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3994"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Кол-во юзеров не прошедших ни единого уровня \n",
    "df.query(\"sum_gamerounds==0\").userid.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ad26ab60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>userid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>1937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>2057</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group  userid\n",
       "0     A    1937\n",
       "1     B    2057"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.query(\"sum_gamerounds==0\").groupby('group', as_index=False).agg({'userid':'count'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a8018f93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(86194, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Удвление юзеров не прошедших ни единого уровня \n",
    "df = df.copy().drop(df[df.sum_gamerounds==0].index)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3b2d601b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Проверка на дублирование информации\n",
    "df.duplicated().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3029a76d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>2294941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>2333530</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group  sum_gamerounds\n",
       "0     A         2294941\n",
       "1     B         2333530"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# количество игровых раундов в обеих группах (gate_30 и gate_40).\n",
    "df.groupby(['group'], as_index=False).agg({'sum_gamerounds':'sum'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c601cba3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(rc={'figure.figsize':(10, 6)})\n",
    "ax = sns.barplot(x='group', y='sum_gamerounds',\n",
    "            data=df.groupby(['group'], as_index=False).agg({'sum_gamerounds':'sum'}))\n",
    "\n",
    "plt.text(0, 2294941, \"2 294 941\", horizontalalignment='left', size='medium', color='black', weight='semibold')\n",
    "plt.text(1, 2333530, \"2 333 530\", horizontalalignment='left', size='medium', color='black', weight='semibold')\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ee36810c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Разница между играми группы В и группы А.: 1.68 %\n"
     ]
    }
   ],
   "source": [
    "print(\"Разница между играми группы В и группы А.:\", \n",
    "round(100*(df.query(\"group=='B'\").sum_gamerounds.sum() - df.query(\"group=='A'\").sum_gamerounds.sum()) \n",
    "      / df.query(\"group=='A'\").sum_gamerounds.sum(), \n",
    "      2), \"%\"\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cdffa142",
   "metadata": {},
   "outputs": [],
   "source": [
    "games_A = df.query(\"group=='A'\").sum_gamerounds.sum() # общее количество раундов в группе А (2294941)\n",
    "games_B = df.query(\"group=='B'\").sum_gamerounds.sum() # общее количество раундов в группе В (2333530)\n",
    "users_A = df.query(\"group=='A'\").userid.count()       # всего пользователей в группе А (42762)\n",
    "users_B = df.query(\"group=='B'\").userid.count()       # всего пользователей в группе В (43432)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "39d83da8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее количество сыгранных раундов пользователем в группе А: 53.66777\n",
      "Среднее количество сыгранных раундов пользователем в группе В: 53.72836\n"
     ]
    }
   ],
   "source": [
    "A_games_users_ratio = games_A / users_A \n",
    "B_games_users_ratio = games_B / users_B \n",
    "print(\"Среднее количество сыгранных раундов пользователем в группе А:\", round(A_games_users_ratio, 5))\n",
    "print(\"Среднее количество сыгранных раундов пользователем в группе В:\", round(B_games_users_ratio, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2854e046",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>retention_1</th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>22769</td>\n",
       "      <td>19993</td>\n",
       "      <td>42762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>23359</td>\n",
       "      <td>20073</td>\n",
       "      <td>43432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>46128</td>\n",
       "      <td>40066</td>\n",
       "      <td>86194</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "retention_1  False   True    All\n",
       "group                           \n",
       "A            22769  19993  42762\n",
       "B            23359  20073  43432\n",
       "All          46128  40066  86194"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Сколько пользователей вернулось к игре через 1 день после установки?\n",
    "pd.crosstab(df['group'], df['retention_1'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "07b89c2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>retention_7</th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>34277</td>\n",
       "      <td>8485</td>\n",
       "      <td>42762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>35166</td>\n",
       "      <td>8266</td>\n",
       "      <td>43432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>69443</td>\n",
       "      <td>16751</td>\n",
       "      <td>86194</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "retention_7  False   True    All\n",
       "group                           \n",
       "A            34277   8485  42762\n",
       "B            35166   8266  43432\n",
       "All          69443  16751  86194"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Сколько пользователей вернулось к игре через 7 день после установки?\n",
    "pd.crosstab(df['group'], df['retention_7'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "563afeb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary table:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_rate_1</th>\n",
       "      <th>retention_7</th>\n",
       "      <th>retention_rate_7</th>\n",
       "      <th>num_of_users</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>19993</td>\n",
       "      <td>0.467541</td>\n",
       "      <td>8485</td>\n",
       "      <td>0.198424</td>\n",
       "      <td>42762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>20073</td>\n",
       "      <td>0.462171</td>\n",
       "      <td>8266</td>\n",
       "      <td>0.190321</td>\n",
       "      <td>43432</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group  retention_1  retention_rate_1  retention_7  retention_rate_7  \\\n",
       "0     A        19993          0.467541         8485          0.198424   \n",
       "1     B        20073          0.462171         8266          0.190321   \n",
       "\n",
       "   num_of_users  \n",
       "0         42762  \n",
       "1         43432  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Коэффициент удержания 1 и 7; общее количество пользователей в каждой группе\n",
    "A_B_summary = df.groupby('group', as_index=False).agg({'retention_1':'mean', 'retention_7':'mean', 'userid':'count'})\\\n",
    "  .rename(columns={'retention_1':'retention_rate_1', 'retention_7':'retention_rate_7', 'userid':'num_of_users'})\n",
    "\n",
    "# Удержание по группам\n",
    "retention_by_group = df.groupby('group',as_index=False).agg({'retention_1':'sum', 'retention_7':'sum'})\n",
    "\n",
    "# Добавление дополнительных столбцов в таблицу\n",
    "A_B_summary['retention_1'] = retention_by_group['retention_1']\n",
    "A_B_summary['retention_7'] = retention_by_group['retention_7']\n",
    "A_B_summary = A_B_summary[['group', 'retention_1', 'retention_rate_1', 'retention_7', 'retention_rate_7', 'num_of_users']]\n",
    "print('Summary table:')\n",
    "A_B_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24827da0",
   "metadata": {},
   "source": [
    "В течение 1 дня после установки игры мы видим небольшое снижение коэффициента удержания в группе В по сравнению с группой А (46,22% против 46,75%). Примерно на 1,15%.\n",
    "На 7-й день после установки игры мы также видим небольшое снижение коэффициента удержания в группе В по сравнению с группой А (19,03% против 19,84%).Это изменение почти равно 4%.\n",
    "Кроме того, мы видим, что общее количество пользователей в группе В выше, чем в группе A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6e7e2838",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.0826612903225765 %\n",
      "1.1485648286777632 %\n"
     ]
    }
   ],
   "source": [
    "# Коэффициент удержания 7 дней в %:\n",
    "print(100 - 100*19.03/19.84, '%')\n",
    "#  Коэффициент удержания 1 день в %:\n",
    "print(100 - 100*46.217/46.754, '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4cf5f327",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>retention_1</th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>22769</td>\n",
       "      <td>19993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>23359</td>\n",
       "      <td>20073</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "retention_1  False   True\n",
       "group                    \n",
       "A            22769  19993\n",
       "B            23359  20073"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cont_t_1 = pd.crosstab(df['group'], df['retention_1'])\n",
    "cont_t_1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d855fc37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>retention_7</th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>34277</td>\n",
       "      <td>8485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>35166</td>\n",
       "      <td>8266</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "retention_7  False  True\n",
       "group                   \n",
       "A            34277  8485\n",
       "B            35166  8266"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cont_t_7 = pd.crosstab(df['group'], df['retention_7'])\n",
    "cont_t_7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86fb552a",
   "metadata": {},
   "source": [
    "Формируем гипотезу\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9deb35",
   "metadata": {},
   "source": [
    "Необходимо узнать, влияет ли изменение версии, с 30 на 40, на удержание пользователей \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e73d7ad3",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: эти две группы не имеют существенных различий. (H0: ret_A = ret_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0371b37f",
   "metadata": {},
   "source": [
    "Альтернативная гипотеза: эти две группы имеют существенные различия. (H_alt: ret_A != ret_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b630397",
   "metadata": {},
   "source": [
    "\n",
    "Я буду использовать функцию **chi2_contingency** из пакета scipy.stats.\n",
    "Этот тест покажет, является ли взаимосвязь между переменными существенной"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a12aa8e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sp\n",
    "import scipy.stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec00edf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Возврат датафрэйма\n",
    "def expected(ar):\n",
    "    return pd.DataFrame(ar, columns=['exp_False', 'exp_True'], index=['A', 'B'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b8664fd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Получение chi-square, p-value, degrees of freedom, expected frequencies\n",
    "chi2, p, dof, exp = sp.stats.chi2_contingency(cont_t_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "686d1d63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>exp_False</th>\n",
       "      <th>exp_True</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>22884.719772</td>\n",
       "      <td>19877.280228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>23243.280228</td>\n",
       "      <td>20188.719772</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      exp_False      exp_True\n",
       "A  22884.719772  19877.280228\n",
       "B  23243.280228  20188.719772"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expected(exp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f7074806",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chi2 = 2.47671866669166\n",
      "P-value = 0.11554308221600512\n"
     ]
    }
   ],
   "source": [
    "# Chi-square и p-value\n",
    "print('Chi2 =', chi2)\n",
    "print('P-value =', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "516a25a0",
   "metadata": {},
   "source": [
    "Для уровня значимости 5% критическое значение chi2_crit = 3,841.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b44f23a0",
   "metadata": {},
   "source": [
    "Для уровня значимости 1% - chi2_crit = 6,635."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4a7451",
   "metadata": {},
   "source": [
    "Для уровня значимости 10% - chi2_crit = 2,706."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "05f5c78a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Вывод результатов\n",
    "ret=1\n",
    "def output(p):\n",
    "    if p < 0.1 and p > 0.05:\n",
    "        print(\"Reject H0. \\nСуществует статистически значимая разница в пользователях' {}-значимость 10 %.\".format(ret))\n",
    "    elif p < 0.05 and p > 0.01:\n",
    "        print(\"Reject H0. \\nСуществует статистически значимая разница в пользователях' {}-значимость 5 %.\".format(ret))\n",
    "    elif p < 0.01:\n",
    "        print(\"Reject H0. \\nСуществует статистически значимая разница' {}-значимость 1 %.\".format(ret))\n",
    "    else:\n",
    "        print(\"Reject H_alt. Статистически значимой разницы между двумя группами нет.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4eb39b36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reject H_alt. Статистически значимой разницы между двумя группами нет.\n"
     ]
    }
   ],
   "source": [
    "output(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70caafe1",
   "metadata": {},
   "source": [
    "Итак, мы можем констатировать, что изменение\n",
    "не влияет на удержание пользователей retention_1.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5fa9358",
   "metadata": {},
   "source": [
    "Провереим retention_7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fb3293e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "chi2, p, dof, exp = sp.stats.chi2_contingency(cont_t_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3d5dd984",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>exp_False</th>\n",
       "      <th>exp_True</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>34451.604126</td>\n",
       "      <td>8310.395874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>34991.395874</td>\n",
       "      <td>8440.604126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      exp_False     exp_True\n",
       "A  34451.604126  8310.395874\n",
       "B  34991.395874  8440.604126"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expected(exp)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c0c4618e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chi2 = 8.984877907964687\n",
      "P-value = 0.0027222297777463066\n"
     ]
    }
   ],
   "source": [
    "# Chi-square и p-value\n",
    "print('Chi2 =', chi2)\n",
    "print('P-value =', p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8ac70a89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reject H0. \n",
      "Существует статистически значимая разница' 7-значимость 1 %.\n"
     ]
    }
   ],
   "source": [
    "# Результат chi2 для коэффициентна 7-day retention\n",
    "ret=7\n",
    "output(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9674d9c",
   "metadata": {},
   "source": [
    "Удалось выяснить, что смена версии  gate_30 на gate_40 влияет на  удержание пользователей retention_7 \n",
    "с уровнем значимости 1% .\n",
    "Введение gate_40 способствует снижению коэффициента удержания игроков,\n",
    "что может привести к негативному влиянию на эффективность компании в будущем.\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b66cef16",
   "metadata": {},
   "source": [
    "Теперь можно проверить существует ли значимая разница в игровых раундах\n",
    "между группой A (gate_30) и группой B (gate_40)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d63ea336",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsQAAAFcCAYAAADPiKgwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAyoElEQVR4nO3df1xUdaL/8ffIIEVqLjbDesmsdd3rdSt1Y0usYO0+BBJGTN0yvdKP+yjtlrZusSLCmlpqLitppbt1y7uZtRIaKkujVpu1YaXc1Cw0H+VP6AuIpoICA5zvH25zRX4IyDAcz+v5eOxjnc+cM/P+HPTDu5kzZ2yGYRgCAAAALKqLvwMAAAAA/kQhBgAAgKVRiAEAAGBpFGIAAABYGoUYAAAAlkYhBgAAgKXZ/R0AQPP27t2rUaNG6YknntDDDz/s7zgA0GlMmjRJhYWF6t69uwzDkMfjUVxcnB577DF/R4PJUIiBTu7NN9+Uy+XSqlWr9OCDD8pu558tAPzgd7/7nWJjYyVJJ0+e1MiRIxUREaGbbrrJz8lgJvxmhaW89NJLysrK0hVXXKHw8HC99957ev/995WcnKzvv/9ehw8f1q9+9StNmTJFc+bM0Z49e2Sz2XT77bfrt7/9rex2u/71X/9VW7duVUhIiCR5b+/bt0+LFi1SaGioDh8+rMsuu0wLFy5Uv3796mXIy8vTs88+2yDbk08+qdtvv73eWHl5udavX6+33npLe/bskdvtVnx8vO8OEABLM9saeb6KigpJ0o9+9KN2OiKwCgoxLOOjjz7S2rVrlZWVpe7du2vWrFn17q+srNTf/vY3SdKMGTPUs2dPbdiwQR6PR4888oheffXVC56y8NVXX2nmzJkKDw/Xm2++qaSkJK1du7beNsOGDdO6detalHn9+vW69tpr1a9fP40ePVp/+ctfKMQAfMKMa6QkLVq0SMuXL1dNTY0OHjyokSNH6rrrrmvx/oDEh+pgIVu2bFFsbKx69Oghm82miRMn1rv/3LfXPvzwQ/3Hf/yHbDabunbtqvHjx+vDDz+84HMMGDBA4eHhkqSxY8eqoKBAx48fr7dNXl6eEhISGvzvo48+avB4b775pu666y5J0qhRo/Tll1/qf//3f1s9dwC4EDOukdLZUybWrVunv/3tb/r4449VWFiol156qbXTh8XxCjEsw263yzAM7+2AgIB69wcHB3v/XFdXV+++uro61dTUNHjM6urqerfPf0zDMBqMtfTVj+3bt2vfvn367//+b61YsUKSFBgYqL/85S/6xS9+ccH9AaA1zLZGNubKK6/UyJEj9fe//12TJ09u02PAmniFGJYRFRWlTZs26dSpU5KkrKysJre97bbbtGrVKhmGoerqamVmZmrYsGGSpJCQEH3xxReSpM2bN9fbb8+ePdqzZ48kafXq1frFL36hHj16tCnvm2++qYSEBG3ZskXvv/++3n//ff3pT3/S5s2bVVRU1KbHBICmmG2NbIzH49EHH3ygG2+8sd0eE9bAK8SwjIiICN1999265557dNlll6l///66/PLLG902NTVVTz/9tFwulzwej26//XZNmTLFe9/cuXPVo0cPDRs2TA6Hw7vfVVddpeeee06FhYUKCQnRokWL2pT12LFj2rRpk9asWdNgDoMHD9bKlSs1Y8aMNj02ADTGTGvkuX44h9hms+nMmTMaOnSoNwvQUjbj3PdHgEvYF198oc8//1yJiYmSpBUrVmjnzp167rnn2uXxP/30U82bN085OTnt8ngA0JFYI2FlvEIMy7juuuv08ssvKzMzUzabTb1799a8efP8HQsAOgXWSFiZz18hfvbZZ3X8+HEtXLhQBQUFSk1NVXl5ucLDwzVnzhzZ7XYVFRUpKSlJZWVluu6665Senq4rrrhCJ0+e1JNPPqnDhw8rJCREzz33XL23XgAAAICL5dMP1W3dulVvv/2293ZSUpLS0tK0ceNGGYahzMxMSdKcOXM0YcIEud1uXX/99Vq2bJkk6bnnnlN4eLjeeecd/frXv9Yzzzzjy7gAAACwIJ8V4u+//14ZGRneE9sLCwtVWVmpwYMHS5LGjBkjt9stj8ejbdu2KSYmpt64JH3wwQdyuVySpPj4eH344YfyeDy+igwAAAAL8lkh/v3vf6/p06d7L6dSUlJS73QHh8Oh4uJiHT9+XN26dZPdbq83fv4+drtd3bp107Fjx3wVGQAAABbkk0L81ltvqXfv3oqIiPCONXaqss1ma3K8KV26cOlkAAAAtB+fXGUiNzdXpaWlSkhI0IkTJ3T69GnZbDYdPXrUu01paamcTqdCQkJUXl6u2tpaBQQEeMclyel06ujRo/rxj3+smpoalZeXq2fPnq3KUlZWrrq61n9u0OHortLSU63er7Mg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Tpn45ptvVFBQIEm6/PLLFR0drU8//VRHjx71blNSUiKn06nQ0NB646WlpXI6nQoJCVF5eblqa2vrjQMAAADtxWeF+MiRI0pNTVV1dbWqq6v13nvvafz48dq/f78OHjyo2tpa5eTkKDIyUmFhYQoKClJ+fr4kKTs7W5GRkQoMDFR4eLhyc3PrjQMAAADtxWenTERFRWnnzp0aPXq0AgICFB0drbi4OIWEhGjq1KmqqqpSVFSUYmNjJUnp6elKTU1VRUWFBg4cqMTEREnS7NmzlZycrOXLl6t3795avHixryIDAADAgnx6DvG0adM0bdq0emMRERFav359g20HDBigrKysBuNhYWFauXKlzzICAADA2vimOgAAAFgahRgAAACWRiEGAACApVGIAQAAYGkUYgAAAFgahRgAAACWRiEGAACApVGIAQAAYGkUYgAAAFgahRgAAACWRiEGAACApVGIAQAAYGkUYgAAAFgahRgAAACWRiEGAACApVGIAQAAYGkUYgAAAFgahRgAAACWRiEGAACApVGIAQAAYGkUYgAAAFgahRgAAACWRiEGALSazebvBADQfijEAAAAsDQKMQAAACyNQgwAAABLoxADAADA0nxaiF944QXFxcUpLi5OixYtkiTNnDlT0dHRSkhIUEJCgjZv3ixJysvLk8vlUnR0tDIyMryPUVBQoLFjxyomJkazZs1STU2NLyMDAADAYnxWiPPy8vSPf/xDb7/9trKzs/Xll19q8+bN2r17t15//XWtW7dO69at04gRI1RZWamUlBQtW7ZMubm52r17t7Zs2SJJSkpKUlpamjZu3CjDMJSZmemryAAAALAgnxVih8Oh5ORkde3aVYGBgerXr5+KiopUVFSktLQ0uVwuLV26VHV1ddq1a5f69u2rPn36yG63y+Vyye12q7CwUJWVlRo8eLAkacyYMXK73b6KDAAAAAuy++qB+/fv7/3zgQMHlJubqzfeeEOfffaZ5s6dq+DgYE2ePFlZWVkKDg6Ww+Hwbu90OlVcXKySkpJ64w6HQ8XFxa3K0atXtzbPweHo3uZ9OwPy+5/Z50B+/+uIObR1nTT78TV7fsn8cyC//5l9Du2V32eF+Af79u3T5MmTNWPGDP3kJz/Riy++6L1v0qRJys7OVmxsbIP9bDabDMNodLw1ysrKVVfX8HEuxOHortLSU63er7Mg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5Oj555/XoUOHdPjwYZWUlOjGG2/UrbfequzsbB05ckRJSUmKj49v9jl37dqlp556Sh6PR9dcc42KioqUnJysX/7yl5o/f7527typiooKGYahp59+WjfddJOSk5MVFBSkL774QkePHtWdd96pkJAQ/f3vf1dpaamefvppRUREqLq6Wunp6dq2bZtqa2s1cOBApaamqlu3brrjjjt04403au/evfrtb3+ra6+9VnPnztX3338vm82mBx98UKNHj64338bmX1hYqNLSUhUWFiokJEQZGRkKDQ3V9u3bNW/ePNlsNt1www2qq6tr8hjPnTtXXbrw38iAGbBOsk6iffFTRaezefNmVVRUaN26dcrKypKkC759lZ+fr5dfflm5ubnKy8vTN998o1WrViktLU3PP/98s/vW1NRo6tSpevzxx7VhwwZNmjTJ+13qO3fuVElJiVavXq3c3Fzdddddevnll737FhQUaPXq1VqzZo3+53/+R8HBwfrrX/+qxMRE73YvvfSSAgICtHbtWq1fv15Op1Pp6enex+jfv7/eeecdDR8+XI888ogmTZqkDRs26OWXX9bixYv1+eefX/CYbd++XUuWLJHb7VaPHj20evVqVVdX6/HHH1dycrKys7N1yy23qLKyssljfPjw4Qs+D4DOgXWSdRLti1eI0encdNNNysjI0KRJkzRs2DDdd999OnbsWLP7DBs2TN27d5ckOZ1O3X777ZKka665Rt9//32z+3799deSpKioKEnS0KFD1b9/f0lnzyW78sor9de//lWHDx/Wp59+qiuuuMK77/DhwxUYGCiHw6Hg4OBGn/eDDz7QqVOnlJeXJ0nyeDzq1auX9zHCw8MlSQcOHFBVVZWio6MlSaGhoYqOjtZHH32kW265pdk53HzzzerWrZskaeDAgTpx4oS+/vpr2e12RURESJLi4+P1+9//XlLjx7hv377NPgeAzoN1knUS7YtXiNHp9OnTR5s3b9bDDz+s8vJyPfDAA9q2bZvO/ZZxj8dTb5/zv2Pdbm/5f+sFBATo/G8wDwgIkHR2kZ48ebIk6d///d917733tvp56+rqlJKSonXr1mndunV66623tGTJEu/9wcHB3u3OZxiGampqZLPZmp3/ZZdd5v3zD9uev8+5+Ro7xm63u8HzA+icWCf/D+sk2gOFGJ3OG2+8oZkzZ+q2225TUlKSbrvtNu3bt09FRUUqKyuTYRh699132+35+vXrp65du+rDDz+UdPY8ua+//lo2m00ff/yxhg8frgkTJuiGG27Qu+++q9ra2lY9/m233aZVq1apurpadXV1SktL0+LFixtsd9111ykwMFCbNm2SJBUXF2vjxo0aNmyYQkJCWj3/n/3sZzIMQ1u2bJEkvffeezpx4oSkpo8xAHNgnWSdRPuiEKPTGT16tGprazVy5EiNGTNG5eXlmjt3rsaPH6+xY8fq7rvvlsPhaLfns9vtev755/XCCy9o9OjRevXVV3XVVVfpsssu0/jx47Vt2za5XC7dc8896tOnj44cOdLoqxRN+a//+i+FhYXprrvu0siRI2UYhpKTkxtsFxgYqGXLlum1116Ty+XSAw88oEcffVRDhw7VT3/601bPPzAwUC+++KKWLFmihIQEbd682fsWZGPHODExseUHDYBfsU6yTqJ92Yzz3ysALOjZZ5/Vf/7nf+qqq67Sd999p4SEBL377rvq0aOHv6MBQKfAOolLGR+qgyWsX79er7zySqP3uVwuhYWF6f7775fdbvdeMohFHoCVsE7CyniFGAAAAJbGOcQAAACwNAoxAAAALI1CDAAAAEujEAMAAMDSKMQAAACwNAoxAAAALO3/A1UrPjD/jR1AAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Проверка распределения \n",
    "sns.set(rc={'figure.figsize':(10, 6)})\n",
    "ax = sns.displot(df, x=\"sum_gamerounds\", col=\"group\")\n",
    "ax.set(ylim=(0, 4000))\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2c22c59",
   "metadata": {},
   "source": [
    "Распределение не нормальное \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed6cdccc",
   "metadata": {},
   "source": [
    "Допустим выборки независимы"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6a99c20",
   "metadata": {},
   "source": [
    "Формируем гипотезу"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2144721d",
   "metadata": {},
   "source": [
    "Необходимо узнать, существует  ли статистически значимая разница в сыгранных игровых раундах пользователями в группе A (gate_30) и группе B (gate_40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2269b21b",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: изменение не влияет на sum_gamerounds. (H0: sum_gamerounds_A = sum_gamerounds_B)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "044d65e2",
   "metadata": {},
   "source": [
    "Альтернативная гипотеза: изменение влияет на sum_gamerounds. (H_alt: sum_gamerounds_A != sum_gamerounds_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84c0d125",
   "metadata": {},
   "source": [
    "Я буду использовать функцию **mannwhitneyu** из пакета scipy.stats.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e527d4d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "A_rounds = df.query(\"group=='A'\").sum_gamerounds.to_numpy() # фрэйм игровых раундов в группе А\n",
    "B_rounds = df.query(\"group=='B'\").sum_gamerounds.to_numpy() # фрэйм игровых раундов в группе В"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0d371248",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MannwhitneyuResult(statistic=934332123.0, pvalue=0.11766714600761834)\n"
     ]
    }
   ],
   "source": [
    "# statistic и p-value\n",
    "res = sp.stats.mannwhitneyu(A_rounds, B_rounds)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "702c5dc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c9e4c345",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.power import tt_ind_solve_power"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "64547909",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08518162030526692"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# effect_size - разница между двумя средними значениями, деленная на стандартное отклонение\n",
    "A_rounds_mean = np.mean(A_rounds)\n",
    "B_rounds_mean = np.mean(B_rounds)\n",
    "sd_A = np.std(A_rounds)\n",
    "sd_B = np.std(B_rounds)\n",
    "se = np.sqrt((np.square(sd_A)/len(A_rounds)) + (np.square(sd_B)/len(B_rounds)))\n",
    "effect_size = (B_rounds_mean - A_rounds_mean) / se\n",
    "effect_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f7a48c8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.015668116552079"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(B_rounds)/len(A_rounds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e2cca8e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# мощность теста\n",
    "tt_ind_solve_power(effect_size= 0.085, nobs1 = len(B_rounds),\\\n",
    "                   alpha=0.05, power=None, ratio=1.016, alternative='two-sided')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78414cf9",
   "metadata": {},
   "source": [
    "Попробуем реализовать условие о небольших размерах выборки (N<30) в тестах mannwhitneyu и получим 25 случайных значений из каждой группы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8133e0df",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0214554e",
   "metadata": {},
   "outputs": [],
   "source": [
    "A_rounds_random = random.choices(A_rounds, k=25)\n",
    "B_rounds_random = random.choices(B_rounds, k=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d768f916",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MannwhitneyuResult(statistic=281.5, pvalue=0.5535358252223287)\n"
     ]
    }
   ],
   "source": [
    "# statistic и p-value\n",
    "res = sp.stats.mannwhitneyu(A_rounds_random, B_rounds_random)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "181dc53d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.2814645795283113"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# effect_size - разница между двумя средними значениями, деленная на стандартное отклонение\n",
    "A_rounds_rand_mean = np.mean(A_rounds_random)\n",
    "B_rounds_rand_mean = np.mean(B_rounds_random)\n",
    "sd_A_rand = np.std(A_rounds_random)\n",
    "sd_B_rand = np.std(B_rounds_random)\n",
    "se_rand = np.sqrt((np.square(sd_A_rand)/len(A_rounds_random)) + (np.square(sd_B_rand)/len(B_rounds_random)))\n",
    "effect_size_rand = (A_rounds_rand_mean - B_rounds_rand_mean) / se_rand\n",
    "effect_size_rand\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "42fe0f8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16406350199442846"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# мощность теста\n",
    "tt_ind_solve_power(effect_size= effect_size_rand, nobs1 = 25, alpha=0.05, power=None, ratio=1, alternative='two-sided')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bf4e319",
   "metadata": {},
   "source": [
    "Мощность плохая из за большой выборки"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdca4b3d",
   "metadata": {},
   "source": [
    "В то же время , согласно тесту mannwhitneyu, мы оба раза получили p-значения > 0,05. Таким образом, мы не должны отвергать нулевую гипотезу (H0: sum_gamerounds_A = sum_gamerounds_B)). Изменение не влияет на sum_gamerounds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36622f44",
   "metadata": {},
   "source": [
    "Попробуем **Student's t test.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd1465d8",
   "metadata": {},
   "source": [
    "Есть ли увеличение sum_gamerounds после изменения gate_30 на gate_40?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea699a1",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: Статистически значимых различий между группами нет. Изменение никак не влияет на sum_gamerounds. (H0: sum_gamerounds_A = sum_gamerounds_B)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61ae5445",
   "metadata": {},
   "source": [
    "Альтернативная гипотеза: Существуют статистически значимые различия между группами. Изменение положительно влияет на sum_gamerounds. (H_alt: sum_gamerounds_A < sum_gamerounds_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16220afd",
   "metadata": {},
   "source": [
    "Я буду использовать функцию ttest_ind из пакета scipy.stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "331ddb34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=-0.08518063202473634, pvalue=0.46605899293000597)\n"
     ]
    }
   ],
   "source": [
    "# statistic и p-value\n",
    "res = sp.stats.ttest_ind(A_rounds, B_rounds, equal_var=False, alternative='less')\n",
    "t, p = sp.stats.ttest_ind(A_rounds, B_rounds, equal_var=False, alternative='less')\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "35f9eb25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reject H_alt. Статистически значимой разницы между двумя группами нет.\n"
     ]
    }
   ],
   "source": [
    "output(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75faa1ae",
   "metadata": {},
   "source": [
    "Есть ли разница в sum_gamerounds после изменения gate_30 на gate_40?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e6bcee2",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: Статистически значимых различий между группами нет. (H0: sum_gamerounds_A = sum_gamerounds_B)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30da816b",
   "metadata": {},
   "source": [
    "Альтернативная гипотеза: Существуют статистически значимые различия между группами. (H_alt: sum_gamerounds_A < sum_gamerounds_B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "14a44d8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=-0.08518063202473634, pvalue=0.9321179858600119)\n"
     ]
    }
   ],
   "source": [
    "# statistic и p-value\n",
    "res = sp.stats.ttest_ind(A_rounds, B_rounds, equal_var=False, alternative='two-sided')\n",
    "t, p = sp.stats.ttest_ind(A_rounds, B_rounds, equal_var=False, alternative='two-sided')\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "f1e5a7f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reject H_alt. Статистически значимой разницы между двумя группами нет.\n"
     ]
    }
   ],
   "source": [
    "output(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0abedcb",
   "metadata": {},
   "source": [
    "# ИТОГИ <h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31965a27",
   "metadata": {},
   "source": [
    "Мы провели A / B-тест chi-square на удержание пользователей и смогли получить вероятностную оценку того, <br> что существует статистически значимая разница между двумя группами.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46441dd5",
   "metadata": {},
   "source": [
    "Итак, мы можем утверждать, что **изменение gate_30 на gate_40 фактически влияет на 7-дневное удержание пользователей с уровнем значимости 1%**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44f7f6d8",
   "metadata": {},
   "source": [
    "С помощью mannwhitneyu и Student's t test удалось выяснить, что **изменение gate_30 на gate_40 не влияет на колличество игр, сыгранных пользователями**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
